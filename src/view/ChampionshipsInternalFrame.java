
package view;

import adjustedClasses.StaticNormalizer;
import adjustedClasses.StaticShower;
import model.Championship;
import model.ChampionshipLeague;
import enums.Sport;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import controller.ChampionshipsInternalFrameController;
import enums.InternalFrameName;
import exceptions.InvalidAShouldBeSmallerEqualThanBInputException;
import exceptions.InvalidTextException;
import exceptions.InvalidPositiveIntegerInputException;
import exceptions.UnavailabilityException;
import java.util.Arrays;
import java.util.List;
import javax.swing.JComponent;

// JInternalFrame which provide to the user the ability to handle
// information about championships
public class ChampionshipsInternalFrame extends AbstractJInternalFrame {

    // controller
    ChampionshipsInternalFrameController controllerObject;
    
    // Models
    private DefaultComboBoxModel<String> sportComboBoxModelObject;
    private DefaultTableModel championshipTableModelObject =null;
    
    // Constructor
    public ChampionshipsInternalFrame() {
        
        initComponents();
        
        createModels();
        
        // Initially, leagueRadioButton is selected
        this.leagueRadioButton.setSelected(true); 
        this.championshipsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
    
    public void setChampionshipsInternalFrameControllerObject(ChampionshipsInternalFrameController 
                                                                            controllerObject){
        this.controllerObject = controllerObject;
    }
    
    public void createModels(){
    
        this.sportComboBoxModelObject = new DefaultComboBoxModel<>();
        this.sportComboBox.setModel(sportComboBoxModelObject);
        this.championshipTableModelObject =(DefaultTableModel) this.championshipsTable.getModel();
    }
    
    // Method which returns the selected championship of the table
    public Championship getSelectedChampionshipFromTable(){
        
        return this.controllerObject.getChampionshipAt(this.championshipsTable.getSelectedRow());
    }
    
    // Method which returns the selected index of the table
    public int getSelectedChampionshipIndexFromTable(){
        
        return this.championshipsTable.getSelectedRow(); 
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createButtonGroup = new javax.swing.ButtonGroup();
        titleLabel = new javax.swing.JLabel();
        createPanel = new javax.swing.JPanel();
        leagueRadioButton = new javax.swing.JRadioButton();
        cupRadioButton = new javax.swing.JRadioButton();
        selectSportLabel = new javax.swing.JLabel();
        sportComboBox = new javax.swing.JComboBox<>();
        championshipNameLabel = new javax.swing.JLabel();
        championshipNameTextField = new javax.swing.JTextField();
        numberOfCompetitorsBigOLabel = new javax.swing.JLabel();
        numberOfCompetitorsTextField = new javax.swing.JTextField();
        bigTrophyLabel = new javax.swing.JLabel();
        bigTrophyTextField = new javax.swing.JTextField();
        createButton = new javax.swing.JButton();
        doneEditingButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        maxRosterLabel = new javax.swing.JLabel();
        maxRosterTextField = new javax.swing.JTextField();
        minRosterLabel = new javax.swing.JLabel();
        minRosterTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        championshipsTable = new javax.swing.JTable();
        buttonsPanel = new javax.swing.JPanel();
        editButton = new javax.swing.JButton();
        reportButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        participationsButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        backToMainButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(834, 671));
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Vrinda", 1, 22)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(153, 0, 0));
        titleLabel.setText("Championships");

        createPanel.setBackground(new java.awt.Color(201, 195, 168));
        createPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(153, 0, 0)), "Create/Edit championship", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.Color.blue)); // NOI18N
        createPanel.setToolTipText("");
        createPanel.setName(""); // NOI18N

        leagueRadioButton.setBackground(new java.awt.Color(201, 195, 168));
        createButtonGroup.add(leagueRadioButton);
        leagueRadioButton.setText("League");

        cupRadioButton.setBackground(new java.awt.Color(201, 195, 168));
        createButtonGroup.add(cupRadioButton);
        cupRadioButton.setText("Cup");

        selectSportLabel.setText("Select Sport:");

        sportComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sportComboBoxActionPerformed(evt);
            }
        });

        championshipNameLabel.setText("Championship Name:");

        championshipNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                championshipNameTextFieldFocusLost(evt);
            }
        });

        numberOfCompetitorsBigOLabel.setText("Limit of Competitors:");

        numberOfCompetitorsTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                numberOfCompetitorsTextFieldFocusLost(evt);
            }
        });

        bigTrophyLabel.setText("Big Trophy:");

        bigTrophyTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                bigTrophyTextFieldFocusLost(evt);
            }
        });

        createButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        createButton.setForeground(java.awt.Color.blue);
        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        doneEditingButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        doneEditingButton.setForeground(java.awt.Color.blue);
        doneEditingButton.setText("Done editing");
        doneEditingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneEditingButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        clearButton.setForeground(java.awt.Color.blue);
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        maxRosterLabel.setText("No of Roster");

        maxRosterTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                maxRosterTextFieldFocusLost(evt);
            }
        });

        minRosterLabel.setText("No of Players");

        minRosterTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                minRosterTextFieldFocusLost(evt);
            }
        });

        javax.swing.GroupLayout createPanelLayout = new javax.swing.GroupLayout(createPanel);
        createPanel.setLayout(createPanelLayout);
        createPanelLayout.setHorizontalGroup(
            createPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createPanelLayout.createSequentialGroup()
                .addGroup(createPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(leagueRadioButton)
                        .addGap(0, 0, 0)
                        .addComponent(cupRadioButton)
                        .addGap(37, 37, 37)
                        .addComponent(selectSportLabel)
                        .addGap(4, 4, 4)
                        .addComponent(sportComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(createPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(minRosterLabel)
                        .addGap(4, 4, 4)
                        .addComponent(minRosterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(maxRosterLabel)
                        .addGap(4, 4, 4)
                        .addComponent(maxRosterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(numberOfCompetitorsBigOLabel)
                        .addGap(4, 4, 4)
                        .addComponent(numberOfCompetitorsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(createPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(championshipNameLabel)
                        .addGap(10, 10, 10)
                        .addComponent(championshipNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(createPanelLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(bigTrophyLabel)
                        .addGap(5, 5, 5)
                        .addComponent(bigTrophyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(createPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(createButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(doneEditingButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        createPanelLayout.setVerticalGroup(
            createPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(createPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(leagueRadioButton)
                    .addComponent(cupRadioButton)
                    .addGroup(createPanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(selectSportLabel))
                    .addGroup(createPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(sportComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(createPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(minRosterLabel))
                    .addGroup(createPanelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(minRosterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(createPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(maxRosterLabel))
                    .addGroup(createPanelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(maxRosterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(createPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(numberOfCompetitorsBigOLabel))
                    .addGroup(createPanelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(numberOfCompetitorsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14)
                .addGroup(createPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(championshipNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(championshipNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(createPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bigTrophyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bigTrophyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(createPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createButton)
                    .addComponent(doneEditingButton)
                    .addComponent(clearButton))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(201, 195, 168));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(153, 0, 0)), "All Championships", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.Color.blue)); // NOI18N

        championshipsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sport", "Type", "Play", "Competition Name", "Roster", "In", "Limit", "Match", "Big Trophy", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        championshipsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(championshipsTable);
        if (championshipsTable.getColumnModel().getColumnCount() > 0) {
            championshipsTable.getColumnModel().getColumn(0).setMinWidth(100);
            championshipsTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            championshipsTable.getColumnModel().getColumn(0).setMaxWidth(100);
            championshipsTable.getColumnModel().getColumn(1).setMinWidth(60);
            championshipsTable.getColumnModel().getColumn(1).setPreferredWidth(60);
            championshipsTable.getColumnModel().getColumn(1).setMaxWidth(60);
            championshipsTable.getColumnModel().getColumn(2).setMinWidth(60);
            championshipsTable.getColumnModel().getColumn(2).setPreferredWidth(60);
            championshipsTable.getColumnModel().getColumn(2).setMaxWidth(60);
            championshipsTable.getColumnModel().getColumn(4).setMinWidth(50);
            championshipsTable.getColumnModel().getColumn(4).setPreferredWidth(50);
            championshipsTable.getColumnModel().getColumn(4).setMaxWidth(50);
            championshipsTable.getColumnModel().getColumn(5).setMinWidth(40);
            championshipsTable.getColumnModel().getColumn(5).setPreferredWidth(40);
            championshipsTable.getColumnModel().getColumn(5).setMaxWidth(40);
            championshipsTable.getColumnModel().getColumn(6).setMinWidth(50);
            championshipsTable.getColumnModel().getColumn(6).setPreferredWidth(50);
            championshipsTable.getColumnModel().getColumn(6).setMaxWidth(50);
            championshipsTable.getColumnModel().getColumn(7).setMinWidth(50);
            championshipsTable.getColumnModel().getColumn(7).setPreferredWidth(50);
            championshipsTable.getColumnModel().getColumn(7).setMaxWidth(50);
            championshipsTable.getColumnModel().getColumn(9).setMinWidth(60);
            championshipsTable.getColumnModel().getColumn(9).setPreferredWidth(60);
            championshipsTable.getColumnModel().getColumn(9).setMaxWidth(60);
        }

        buttonsPanel.setBackground(new java.awt.Color(201, 195, 168));

        editButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        editButton.setForeground(java.awt.Color.blue);
        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        reportButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        reportButton.setForeground(java.awt.Color.blue);
        reportButton.setText("Report");
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        deleteButton.setForeground(java.awt.Color.blue);
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        participationsButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        participationsButton.setForeground(java.awt.Color.blue);
        participationsButton.setText("Participations");
        participationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                participationsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonsPanelLayout = new javax.swing.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(reportButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(participationsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addContainerGap(411, Short.MAX_VALUE))
        );
        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(reportButton)
                    .addComponent(editButton)
                    .addComponent(participationsButton))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 144, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(201, 195, 168));

        backToMainButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        backToMainButton.setForeground(java.awt.Color.blue);
        backToMainButton.setText("Back");
        backToMainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToMainButtonActionPerformed(evt);
            }
        });

        saveButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        saveButton.setForeground(java.awt.Color.blue);
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(719, Short.MAX_VALUE)
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backToMainButton)
                .addGap(91, 91, 91))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backToMainButton)
                    .addComponent(saveButton)))
        );

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagesUI/peterBonettiSmaller.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titleLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(createPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73)
                                .addComponent(jLabel1)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titleLabel)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    // clear methods
    
    public void clearForm(){
        List<JComponent> componentsList = Arrays.asList(this.minRosterTextField,
                                                        this.maxRosterTextField,
                                              this.numberOfCompetitorsTextField,
                                                 this.championshipNameTextField,
                                                        this.bigTrophyTextField,
                                                        this.leagueRadioButton);
        super.clearForm(componentsList);
     
        this.sportComboBox.setSelectedItem(Sport.byGivenOrderNumber(0).toString());
    }
    
    public void clearNumberOfCompetitorsTextField(){
        this.numberOfCompetitorsTextField.setText("");
    }
    public void clearMinRosterTextField(){
        this.minRosterTextField.setText("");
    }
    public void clearMaxRosterTextField(){
        this.maxRosterTextField.setText("");
    }
    public void clearChampionshipNameTextField(){
        this.championshipNameTextField.setText("");
    }
    public void clearBigTrophyTextField(){
        this.bigTrophyTextField.setText("");
    }
    
    // method for updating sportComboBox
    // runs once
    public void updateSportComboBox(){
        
        // it registers all the collegiate  and all the non collegiate sports
        this.controllerObject.updateSportComboBoxModel(sportComboBoxModelObject,true,true);
    }
    
    // method for updating ChampionshipTable
    public void updateChampionshipsTable(){
             
        super.ClearJTable(championshipTableModelObject);
        
        this.controllerObject.updateChampionshipsTableModel(championshipTableModelObject);  
    }
    
    // Method which creates a championship according to the filled information of the form
    public void createChampionship(){
        
        this.controllerObject.createChampionship(this.leagueRadioButton.isSelected(),
                    this.cupRadioButton.isSelected(),
                    Sport.byGivenOrderNumber(this.sportComboBox.getSelectedIndex()),
                    this.championshipNameTextField.getText(), 
                    this.numberOfCompetitorsTextField.getText(),
                    this.bigTrophyTextField.getText(), 
                    this.minRosterTextField.getText(),
                    this.maxRosterTextField.getText());
    }
    
    // checks that every filled information has got the appropriate form
    // checks for:
    // ----------- InvalidPositiveIntegerInputException
    // ----------- InvalidAShouldBeSmallerEqualThanBInputException
    // ----------- InvalidTextException
    public void checkCreateChampionship() throws InvalidPositiveIntegerInputException, 
                    InvalidAShouldBeSmallerEqualThanBInputException, InvalidTextException{
        
        this.controllerObject.checkCreateChampionship(this.championshipNameTextField.getText(), 
                    this.numberOfCompetitorsTextField.getText(),
                    this.bigTrophyTextField.getText(), this.minRosterTextField.getText(),
                    this.maxRosterTextField.getText());
    }
    
    public void showWarningMessageAboutNullPointerException(){
        StaticShower.showWarningMessage(StaticShower.NOT_EXACTLY_ONE_LINE_PERIOD);
    }
    
    private void backToMainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToMainButtonActionPerformed
        this.controllerObject.showInternalFrameObject(InternalFrameName.STARTMENUINTERNAL);
    }//GEN-LAST:event_backToMainButtonActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
 
        this.createButtonGroup.add(leagueRadioButton);
        this.createButtonGroup.add(cupRadioButton);
    }//GEN-LAST:event_formInternalFrameOpened

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed

        try{
            this.checkCreateChampionship();
            this.createChampionship();
            this.clearForm();
            this.updateChampionshipsTable();
        } catch (InvalidPositiveIntegerInputException e) {
            StaticShower.showWarningMessageForInvalidInput(e);
        } catch (InvalidAShouldBeSmallerEqualThanBInputException e) {
            StaticShower.showWarningMessageForInvalidInput(e);
        } catch (InvalidTextException e) {
            StaticShower.showWarningMessageForInvalidInput(e);
        }
    }//GEN-LAST:event_createButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        
       this.controllerObject.serialize();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        
        try{
            Championship editingChampionship = getSelectedChampionshipFromTable();
            
            if (editingChampionship == null)
                throw new NullPointerException();
            
            // Set the appropriate radio button as selected
            if (editingChampionship instanceof ChampionshipLeague)
                this.leagueRadioButton.setSelected(true);
            else
                this.cupRadioButton.setSelected(true);
        
            // Pass all the attributes of  selected championship απο το object to the form
            this.sportComboBox.setSelectedItem(editingChampionship.getSport().toString());
            this.minRosterTextField.setText(((Integer)editingChampionship.getMinRoster()).toString());
            this.maxRosterTextField.setText(((Integer)editingChampionship.getMaxRoster()).toString());
            this.numberOfCompetitorsTextField.setText(((Integer)editingChampionship.getNumberOfCompetitorsBigO()).toString());
            this.championshipNameTextField.setText(editingChampionship.getName());
            this.bigTrophyTextField.setText(editingChampionship.getBigTrophyString());
        }
        catch(NullPointerException e){
            this.showWarningMessageAboutNullPointerException();
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void doneEditingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneEditingButtonActionPerformed
        
        try {
            this.checkCreateChampionship();
            // delete the chosen Championship from the treeSet
            this.controllerObject.removeChampionshipAt(getSelectedChampionshipIndexFromTable());
            // Create the edited Championship again
            createChampionship();
            clearForm();
            this.updateChampionshipsTable();
        }catch (InvalidPositiveIntegerInputException e) {
            StaticShower.showWarningMessageForInvalidInput(e);
        }catch (InvalidAShouldBeSmallerEqualThanBInputException e) {
            StaticShower.showWarningMessageForInvalidInput(e);
        }catch (InvalidTextException e) {
            StaticShower.showWarningMessageForInvalidInput(e);
        }
        
    }//GEN-LAST:event_doneEditingButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        try{
            this.controllerObject.removeChampionshipAt(getSelectedChampionshipIndexFromTable());
            this.updateChampionshipsTable();
        }
        catch(NullPointerException e){
            this.showWarningMessageAboutNullPointerException();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clearForm();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void participationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_participationsButtonActionPerformed

        try{
            Championship selectedChampionship = this.getSelectedChampionshipFromTable();
            
            if (selectedChampionship == null)
                throw new NullPointerException();
            
            if (this.getSelectedChampionshipFromTable().getSport().isColegiate()){
                this.controllerObject.setChampionshipObjectToteamsParticipationsInternalFrameControllerObject
                                                                                     (selectedChampionship);
                this.controllerObject.showInternalFrameObject(InternalFrameName.TEAMSPARTICIPATIONSINTERNAL);  
            }
            else{
                this.controllerObject.setChampionshipObjectTosolistsParticipationsInternalFrameControllerObject
                                                                                        (selectedChampionship);
                this.controllerObject.showInternalFrameObject(InternalFrameName.SOLISTSPARTICIPATIONSINTERNAL); 
            }
        }
        catch(NullPointerException e){
            this.showWarningMessageAboutNullPointerException();
        }
    }//GEN-LAST:event_participationsButtonActionPerformed

    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed
        
        try{
            Championship selectedChampionship = this.getSelectedChampionshipFromTable();
            
            if (selectedChampionship == null)
                throw new NullPointerException();
            
            if (!selectedChampionship.getSport().isReportAvailable())
                throw new UnavailabilityException("Sorry, unavailable in version 1." + System.lineSeparator() 
                +"Report is currently available only for Basketball and Football Championships."
                + System.lineSeparator() + "Wait for version 2!!!");
            
            this.controllerObject.setChampionshipObjectToReportInternalFrameControllerObject(selectedChampionship);
                                                                                     
            this.controllerObject.showInternalFrameObject(InternalFrameName.REPORTINTERNAL);
        }
        catch(NullPointerException e){
            this.showWarningMessageAboutNullPointerException();
        }
        catch(UnavailabilityException e){
            StaticShower.showMessage(e);
        }
    }//GEN-LAST:event_reportButtonActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        
        this.controllerObject.updateNumberOfCompetitorsColumn(championshipTableModelObject);
        this.controllerObject.updateStatusColumn(championshipTableModelObject);
    }//GEN-LAST:event_formComponentShown

    private void sportComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sportComboBoxActionPerformed
        
        String sportString = (String) this.sportComboBoxModelObject.getSelectedItem();
            
        if (controllerObject.checkIfCollegiate(sportString)){
            
            minRosterTextField.setEditable(true);
            maxRosterTextField.setEditable(true);
            //minRosterTextField.setEnabled(true);
            //maxRosterTextField.setEnabled(true);
            
            if (minRosterTextField.getText().equals("1") || maxRosterTextField.getText().equals("1") ){
                minRosterTextField.setText("");
                maxRosterTextField.setText("");
            }
        }
        else{
            minRosterTextField.setText("1");
            maxRosterTextField.setText("1");
            minRosterTextField.setEditable(false);
            maxRosterTextField.setEditable(false);
            //minRosterTextField.setEnabled(false);
            //maxRosterTextField.setEnabled(false);
        }
    }//GEN-LAST:event_sportComboBoxActionPerformed

    private void minRosterTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_minRosterTextFieldFocusLost
        
        this.minRosterTextField.setText(StaticNormalizer.normalizeNumberString
                                        (this.minRosterTextField.getText()));
    }//GEN-LAST:event_minRosterTextFieldFocusLost

    private void maxRosterTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_maxRosterTextFieldFocusLost
        
        this.maxRosterTextField.setText(StaticNormalizer.normalizeNumberString
                                        (this.maxRosterTextField.getText()));
    }//GEN-LAST:event_maxRosterTextFieldFocusLost

    private void numberOfCompetitorsTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numberOfCompetitorsTextFieldFocusLost
        
        this.numberOfCompetitorsTextField.setText(StaticNormalizer.normalizeNumberString
                                        (this.numberOfCompetitorsTextField.getText()));
    }//GEN-LAST:event_numberOfCompetitorsTextFieldFocusLost

    private void championshipNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_championshipNameTextFieldFocusLost
        
        this.championshipNameTextField.setText(StaticNormalizer.normalizeTextString
                                        (this.championshipNameTextField.getText()));
    }//GEN-LAST:event_championshipNameTextFieldFocusLost

    private void bigTrophyTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bigTrophyTextFieldFocusLost

        this.bigTrophyTextField.setText(StaticNormalizer.normalizeTextString
                                        (this.bigTrophyTextField.getText()));
    }//GEN-LAST:event_bigTrophyTextFieldFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backToMainButton;
    private javax.swing.JLabel bigTrophyLabel;
    private javax.swing.JTextField bigTrophyTextField;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JLabel championshipNameLabel;
    private javax.swing.JTextField championshipNameTextField;
    private javax.swing.JTable championshipsTable;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton createButton;
    private javax.swing.ButtonGroup createButtonGroup;
    private javax.swing.JPanel createPanel;
    private javax.swing.JRadioButton cupRadioButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton doneEditingButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton leagueRadioButton;
    private javax.swing.JLabel maxRosterLabel;
    private javax.swing.JTextField maxRosterTextField;
    private javax.swing.JLabel minRosterLabel;
    private javax.swing.JTextField minRosterTextField;
    private javax.swing.JLabel numberOfCompetitorsBigOLabel;
    private javax.swing.JTextField numberOfCompetitorsTextField;
    private javax.swing.JButton participationsButton;
    private javax.swing.JButton reportButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel selectSportLabel;
    private javax.swing.JComboBox<String> sportComboBox;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
